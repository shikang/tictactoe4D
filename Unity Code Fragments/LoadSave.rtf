{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 using UnityEngine;\
using System.Collection\
using System.Collection.Generic\
using System.Xml;\
using System.Xml.Serialization\
using System.IO\
\
public class LoadSaveManager()\
\{\
	[XmlRoot(\'93Gamedata\'94]\
	public class GameStateData\
	\{\
		// Complete transform for a game object (Vectors not serializable)\
		public struct DataTransform\
		\{\
			public float posX, posY, posZ;\
			public float rotX, rotY, rotZ;\
			public float scaleX, scaleY, scaleZ;\
		\}\
\
		public class DataPlayer\
		\{\
			public DataTransform trs;\
			public float cash, health, etc etc\
		\}\
\
		public class DataEnemy\
		\{\
			public DataTransform trs;\
			\'85\
		\}\
\
		// Instance variables\
		public DataPlayer Player = new DataPlayer();\
		public List<DataEnemy> Enemies = new List<DataEnemy>();\
	\}\
\
	// Game data to save/load\
	public GameStateData GameState = new GameStateData();\
\
	public void Save(string filename = \'93GameData.xml\'94)\
	\{\
		GameState.Enemies.Clear();\
		XmlSerializer s = new XmlSerializer(typeof(GameStateData));\
		Filestream stream = new Filestream(Filename, FileMode.Create);\
		s.Serialize(Stream, GameState);\
		Stream.Close();\
	\}\
\
	public void Load()\
	\{\
		XmlSerializer s = new XmlSerializer(typeof(GameStatedata));\
		Filestream stream = new Filestream(Filename, FileMode.Open);\
		GameState = Serializer.Deserialize(Stream) as GameStateData;\
		Stream.Close();\
	\}\
\}\
\
// Function of a typical game object (e.g. Player) to call for saving\
public void SaveGamePrepare()\
\{\
	LoadSaveManager.GameStateData.DataPlayer PlayerData = (player obj data);\
	// fill in pos, rot, scale and vars\
	// write it into an obj var (to write it into xml later)\
\}\
\
public void LoadGameComplete\
\{\
	LoadSaveManager.GameStateData.DataPlayer PlayerData = (player obj data);\
	// ser pos, rot, scale, vars\
\}\
\
// Enemy (array)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 public void SaveGamePrepare()\
\{\
	// create new element\
	LoadSaveManager.GameStateData.DataEnemy ThisEnemy\
		= new LoadSaveManager.GameStateData.DataEnemy();\
\
	// fill in pos, rot, scale and vars\
	// add to an array (to write it into xml later)\
\}\
\
public void LoadGameComplete\
\{\
	// Cycle through enemies and find matching ID\
	List<LoadSaveManager.GameStateData.DataEnemy> Enemies = (loaded enemy array)\
	LoadSaveManager.GameStateData.DataEnemy thisEnemy = null;\
	for(int i = 0; i < Enemies.Count; ++i)\
	\{\
		if(id matches)\
		\{\
			// found enemy. assign and break\
			thisEnemy = Enemies[i];\
			break;\
		\}\
	\}\
	// ser pos, rot, scale, vars\
\}}